<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cc.lab_teach.mapper.HomeworkMapper">
  <resultMap id="BaseResultMap" type="com.cc.lab_teach.domain.Homework">
    <id column="h_id" jdbcType="BIGINT" property="hId" />
    <result column="e_id" jdbcType="BIGINT" property="eId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.cc.lab_teach.domain.Homework">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="standard" jdbcType="LONGVARCHAR" property="standard" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    h_id, e_id
  </sql>
  <sql id="Blob_Column_List">
    content, `standard`
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.cc.lab_teach.domain.HomeworkExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.cc.lab_teach.domain.HomeworkExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from homework
    where h_id = #{hId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from homework
    where h_id = #{hId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.cc.lab_teach.domain.HomeworkExample">
    delete from homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cc.lab_teach.domain.Homework">
    insert into homework (h_id, e_id, content, 
      `standard`)
    values (#{hId,jdbcType=BIGINT}, #{eId,jdbcType=BIGINT}, #{content,jdbcType=LONGVARCHAR}, 
      #{standard,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cc.lab_teach.domain.Homework">
    insert into homework
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="hId != null">
        h_id,
      </if>
      <if test="eId != null">
        e_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="standard != null">
        `standard`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="hId != null">
        #{hId,jdbcType=BIGINT},
      </if>
      <if test="eId != null">
        #{eId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="standard != null">
        #{standard,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cc.lab_teach.domain.HomeworkExample" resultType="java.lang.Long">
    select count(*) from homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update homework
    <set>
      <if test="record.hId != null">
        h_id = #{record.hId,jdbcType=BIGINT},
      </if>
      <if test="record.eId != null">
        e_id = #{record.eId,jdbcType=BIGINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.standard != null">
        `standard` = #{record.standard,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update homework
    set h_id = #{record.hId,jdbcType=BIGINT},
      e_id = #{record.eId,jdbcType=BIGINT},
      content = #{record.content,jdbcType=LONGVARCHAR},
      `standard` = #{record.standard,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update homework
    set h_id = #{record.hId,jdbcType=BIGINT},
      e_id = #{record.eId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cc.lab_teach.domain.Homework">
    update homework
    <set>
      <if test="eId != null">
        e_id = #{eId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="standard != null">
        `standard` = #{standard,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where h_id = #{hId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.cc.lab_teach.domain.Homework">
    update homework
    set e_id = #{eId,jdbcType=BIGINT},
      content = #{content,jdbcType=LONGVARCHAR},
      `standard` = #{standard,jdbcType=LONGVARCHAR}
    where h_id = #{hId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cc.lab_teach.domain.Homework">
    update homework
    set e_id = #{eId,jdbcType=BIGINT}
    where h_id = #{hId,jdbcType=BIGINT}
  </update>
</mapper>